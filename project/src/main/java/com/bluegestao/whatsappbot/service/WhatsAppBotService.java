package com.bluegestao.whatsappbot.service;

import com.bluegestao.whatsappbot.model.Contact;
import com.bluegestao.whatsappbot.model.Message;
import com.bluegestao.whatsappbot.repository.ContactRepository;
import com.bluegestao.whatsappbot.repository.MessageRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.format.DateTimeFormatter;
import java.util.Optional;

@Service
public class WhatsAppBotService {
    private static final Logger logger = LoggerFactory.getLogger(WhatsAppBotService.class);
    
    @Autowired
    private ContactRepository contactRepository;
    
    @Autowired
    private MessageRepository messageRepository;
    
    @Autowired
    private WhatsAppApiService whatsAppApiService;
    
    public void processIncomingMessage(String phoneNumber, String senderName, String messageContent) {
        try {
            logger.info("üì® Processando mensagem de: {} ({})", senderName, phoneNumber);
            logger.info("üí¨ Conte√∫do: {}", messageContent);
            
            // Salvar a mensagem recebida
            Message incomingMessage = new Message(phoneNumber, senderName, messageContent);
            messageRepository.save(incomingMessage);
            
            // Processar ou criar contato
            Contact contact = processContact(phoneNumber, senderName);
            
            // Gerar resposta autom√°tica
            String response = generateWelcomeResponse(contact, messageContent);
            
            // Enviar resposta via WhatsApp
            whatsAppApiService.sendMessage(phoneNumber, response);
            
            // Salvar a mensagem de resposta
            Message responseMessage = new Message(phoneNumber, "Blue Gest√£o Bot", response);
            messageRepository.save(responseMessage);
            
            logger.info("‚úÖ Mensagem processada e resposta enviada para: {}", senderName);
            
        } catch (Exception e) {
            logger.error("‚ùå Erro ao processar mensagem de {}: {}", phoneNumber, e.getMessage());
        }
    }
    
    private Contact processContact(String phoneNumber, String senderName) {
        Optional<Contact> existingContact = contactRepository.findByPhoneNumber(phoneNumber);
        
        if (existingContact.isPresent()) {
            Contact contact = existingContact.get();
            contact.incrementMessageCount();
            if (senderName != null && !senderName.isEmpty()) {
                contact.setName(senderName);
            }
            return contactRepository.save(contact);
        } else {
            Contact newContact = new Contact(phoneNumber, senderName);
            logger.info("üë§ Novo contato registrado: {} ({})", senderName, phoneNumber);
            return contactRepository.save(newContact);
        }
    }
    
    private String generateWelcomeResponse(Contact contact, String messageContent) {
        StringBuilder response = new StringBuilder();
        
        // Mensagem principal de boas-vindas
        response.append("üéâ *Seja muito bem-vindo ao atendimento da Blue Gest√£o!*\n\n");
        
        if (contact.getMessageCount() == 1) {
            // Primeira mensagem do usu√°rio
            response.append("Ol√°! Fico feliz em ter voc√™ aqui! üòä\n\n");
            response.append("Sou o assistente virtual da *Blue Gest√£o* e estou aqui para ajud√°-lo da melhor forma poss√≠vel.\n\n");
        } else {
            // Usu√°rio j√° entrou em contato antes
            response.append("Que bom ter voc√™ de volta! ü§ó\n\n");
            response.append("Esta √© nossa ").append(contact.getMessageCount()).append("¬™ conversa. ");
            response.append("Estou sempre aqui para ajud√°-lo!\n\n");
        }
        
        // Menu de op√ß√µes
        response.append("üìã *Como posso ajud√°-lo hoje?*\n");
        response.append("Digite uma das op√ß√µes:\n\n");
        response.append("1Ô∏è‚É£ Informa√ß√µes sobre nossos servi√ßos\n");
        response.append("2Ô∏è‚É£ Solicitar or√ßamento\n");
        response.append("3Ô∏è‚É£ Suporte t√©cnico\n");
        response.append("4Ô∏è‚É£ Falar com atendente humano\n");
        response.append("5Ô∏è‚É£ Hor√°rios de funcionamento\n\n");
        
        response.append("üíô *Blue Gest√£o* - Sua parceira em solu√ß√µes empresariais!\n");
        response.append("‚è∞ Hor√°rio de atendimento: Segunda a Sexta, 8h √†s 18h");
        
        return response.toString();
    }
    
    public void sendCustomMessage(String phoneNumber, String message) {
        try {
            whatsAppApiService.sendMessage(phoneNumber, message);
            
            Message customMessage = new Message(phoneNumber, "Blue Gest√£o Bot", message);
            messageRepository.save(customMessage);
            
            logger.info("üì§ Mensagem personalizada enviada para: {}", phoneNumber);
        } catch (Exception e) {
            logger.error("‚ùå Erro ao enviar mensagem personalizada: {}", e.getMessage());
        }
    }
}